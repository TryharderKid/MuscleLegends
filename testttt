local petShopFolder = game:GetService("ReplicatedStorage").cPetShopFolder

-- Names to exclude
local excludeNames = {
    ["A. Gnatomy"] = true,
    ["Alien Girl"] = true,
    ["Golden Warrior"] = true,
    ["Green-Fly"] = true,
    ["Hank"] = true,
    ["Ice Ice"] = true,
    ["Mask Of Gold"] = true,
    ["Masked Marksman"] = true,
    ["Mr. Serious"] = true,
    ["Sir Flame"] = true,
    ["Sky Hawk"] = true,
    ["Screaming Bones"] = true,
    ["Slitherman"] = true,
    ["Smiley"] = true,
    ["Chops"] = true,
    ["Boy Wonder"] = true,
    ["Cool Guy Larry"] = true
}

-- Function to convert Color3 to a readable string
local function colorToString(color)
    if typeof(color) == "Color3" then
        return string.format("RGB(%d, %d, %d)", 
            math.floor(color.R * 255 + 0.5), 
            math.floor(color.G * 255 + 0.5), 
            math.floor(color.B * 255 + 0.5))
    else
        return tostring(color)
    end
end

-- Function to check if a string ends with "Aura" (case insensitive)
local function isAuraName(name)
    local lowerName = string.lower(name)
    return string.sub(lowerName, -4) == "aura"
end

local function extractItemsByRarity()
    -- Create tables to store items by rarity and type
    local petsByRarity = {}
    local aurasByRarity = {}
    
    -- Iterate through each pet/aura in petShopFolder
    for _, item in pairs(petShopFolder:GetChildren()) do
        local itemName = item.Name
        print("Processing item: " .. itemName)
        
        -- Skip excluded names
        if not excludeNames[itemName] then
            -- Try to find the rarity value
            local rarityValue = item:FindFirstChild("rarityValue")
            
            if rarityValue and rarityValue:IsA("StringValue") then
                local rarity = rarityValue.Value
                
                -- Check if it's an aura by name or by looking for isPowerUp or powerUpColor
                local isPowerUp = item:FindFirstChild("isPowerUp")
                local powerUpColor = item:FindFirstChild("powerUpColor")
                local isAura = isAuraName(itemName) or 
                              (isPowerUp and isPowerUp:IsA("BoolValue")) or 
                              (powerUpColor and powerUpColor:IsA("Color3Value"))
                
                if isAura then
                    -- Initialize rarity table for auras if it doesn't exist
                    if not aurasByRarity[rarity] then
                        aurasByRarity[rarity] = {}
                    end
                    
                    -- Add aura to appropriate rarity table with color if available
                    local colorStr = ""
                    if powerUpColor and powerUpColor:IsA("Color3Value") then
                        colorStr = " (Color: " .. colorToString(powerUpColor.Value) .. ")"
                    end
                    
                    aurasByRarity[rarity][itemName] = itemName .. colorStr
                else
                    -- Initialize rarity table for pets if it doesn't exist
                    if not petsByRarity[rarity] then
                        petsByRarity[rarity] = {}
                    end
                    
                    -- Add pet to appropriate rarity table
                    petsByRarity[rarity][itemName] = itemName
                end
            else
                print("Missing rarity value for: " .. itemName)
            end
        end
    end
    
    -- Format the output
    local result = ""
    
    -- Define rarity order (add any missing rarities to this list)
    local rarityOrder = {
        "Basic", 
        "Advanced", 
        "Rare", 
        "Epic", 
        "Unique", 
        "Legendary", 
        "Mythical", 
        "Divine", 
        "Godly"
    }
    
    -- First add pets grouped by rarity
    for _, rarity in ipairs(rarityOrder) do
        local pets = petsByRarity[rarity]
        
        if pets and next(pets) then
            -- Add rarity header for pets
            result = result .. rarity .. " Pets\n"
            
            -- Sort pet names for consistent output
            local petNames = {}
            for petName, _ in pairs(pets) do
                table.insert(petNames, petName)
            end
            table.sort(petNames)
            
            -- Add each pet
            for _, petName in ipairs(petNames) do
                result = result .. petName .. "\n"
            end
            
            -- Add a blank line after each rarity group
            result = result .. "\n"
        end
    end
    
    -- Then add auras grouped by rarity
    for _, rarity in ipairs(rarityOrder) do
        local auras = aurasByRarity[rarity]
        
        if auras and next(auras) then
            -- Add rarity header for auras
            result = result .. rarity .. " Auras\n"
            
            -- Sort aura names for consistent output
            local auraNames = {}
            for auraName, _ in pairs(auras) do
                table.insert(auraNames, auraName)
            end
            table.sort(auraNames)
            
            -- Add each aura with color if available
            for _, auraName in ipairs(auraNames) do
                local auraInfo = auras[auraName]
                result = result .. auraInfo .. "\n"
            end
            
            -- Add a blank line after each rarity group
            result = result .. "\n"
        end
    end
    
    -- Check for any rarities not in our predefined order
    local function checkExtraRarities(itemsByRarity, itemType)
        for rarity, items in pairs(itemsByRarity) do
            local found = false
            for _, orderedRarity in ipairs(rarityOrder) do
                if rarity == orderedRarity then
                    found = true
                    break
                end
            end
            
            if not found and next(items) then
                -- Add rarity header for this additional rarity
                result = result .. rarity .. " " .. itemType .. "\n"
                
                -- Sort item names
                local itemNames = {}
                for itemName, _ in pairs(items) do
                    table.insert(itemNames, itemName)
                end
                table.sort(itemNames)
                
                -- Add each item
                for _, itemName in ipairs(itemNames) do
                    local itemInfo = items[itemName]
                    result = result .. itemInfo .. "\n"
                end
                
                -- Add a blank line
                result = result .. "\n"
            end
        end
    end
    
    checkExtraRarities(petsByRarity, "Pets")
    checkExtraRarities(aurasByRarity, "Auras")
    
    return result
end

local itemDataString = extractItemsByRarity()
print("\nExtracted Item Data by Rarity:")
print(itemDataString)

-- Try to copy to clipboard
local success, err = pcall(function()
    setclipboard(itemDataString)
end)

if success then
    print("Item data copied to clipboard!")
else
    print("Failed to copy to clipboard: " .. tostring(err))
    
    -- Try writing to a file if clipboard fails
    pcall(function()
        writefile("ItemsByRarity.txt", itemDataString)
        print("Data written to ItemsByRarity.txt")
    end)
end
