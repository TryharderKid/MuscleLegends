local crystalChances = game:GetService("ReplicatedStorage").crystalChances

-- Names to exclude
local excludeNames = {
    ["A. Gnatomy"] = true,
    ["Alien Girl"] = true,
    ["Golden Warrior"] = true,
    ["Green-Fly"] = true,
    ["Hank"] = true,
    ["Ice Ice"] = true,
    ["Mask Of Gold"] = true,
    ["Masked Marksman"] = true,
    ["Mr. Serious"] = true,
    ["Sir Flame"] = true,
    ["Sky Hawk"] = true,
    ["Screaming Bones"] = true,
    ["Slitherman"] = true,
    ["Smiley"] = true,
    ["Chops"] = true,
    ["Boy Wonder"] = true,
    ["Cool Guy Larry"] = true
}

local function extractPetsByRarity()
    -- Create tables to store pets by rarity
    local petsByRarity = {}
    
    -- Iterate through each egg folder in crystalChances
    for _, eggFolder in pairs(crystalChances:GetChildren()) do
        local eggName = eggFolder.Name
        print("Processing egg: " .. eggName)
        
        -- Iterate through each pet entry in the egg folder
        for _, petEntry in pairs(eggFolder:GetChildren()) do
            -- Try to find the required values
            local nameValue = petEntry:FindFirstChild("nameValue")
            local rarityValue = petEntry:FindFirstChild("rarityValue")
            
            if nameValue and rarityValue and nameValue:IsA("StringValue") and rarityValue:IsA("StringValue") then
                local petName = nameValue.Value
                local rarity = rarityValue.Value
                
                -- Skip excluded names
                if not excludeNames[petName] then
                    -- Initialize rarity table if it doesn't exist
                    if not petsByRarity[rarity] then
                        petsByRarity[rarity] = {}
                    end
                    
                    -- Add pet to appropriate rarity table with its egg
                    petsByRarity[rarity][petName] = eggName
                end
            end
        end
    end
    
    -- Format the output
    local result = ""
    
    -- Define rarity order (add any missing rarities to this list)
    local rarityOrder = {
        "Basic", 
        "Advanced", 
        "Rare", 
        "Epic", 
        "Unique", 
        "Legendary", 
        "Mythical", 
        "Divine", 
        "Godly"
    }
    
    -- Add pets grouped by rarity in the specified order
    for _, rarity in ipairs(rarityOrder) do
        local pets = petsByRarity[rarity]
        
        if pets and next(pets) then
            -- Add rarity header
            result = result .. rarity .. "\n"
            
            -- Sort pet names for consistent output
            local petNames = {}
            for petName, _ in pairs(pets) do
                table.insert(petNames, petName)
            end
            table.sort(petNames)
            
            -- Add each pet with its egg
            for _, petName in ipairs(petNames) do
                local eggName = pets[petName]
                result = result .. petName .. " = " .. eggName .. "\n"
            end
            
            -- Add a blank line after each rarity group
            result = result .. "\n"
        end
    end
    
    -- Check for any rarities not in our predefined order
    for rarity, pets in pairs(petsByRarity) do
        local found = false
        for _, orderedRarity in ipairs(rarityOrder) do
            if rarity == orderedRarity then
                found = true
                break
            end
        end
        
        if not found then
            -- Add rarity header for this additional rarity
            result = result .. rarity .. "\n"
            
            -- Sort pet names
            local petNames = {}
            for petName, _ in pairs(pets) do
                table.insert(petNames, petName)
            end
            table.sort(petNames)
            
            -- Add each pet with its egg
            for _, petName in ipairs(petNames) do
                local eggName = pets[petName]
                result = result .. petName .. " = " .. eggName .. "\n"
            end
            
            -- Add a blank line
            result = result .. "\n"
        end
    end
    
    return result
end

local petDataString = extractPetsByRarity()
print("\nExtracted Pet Data by Rarity:")
print(petDataString)

-- Try to copy to clipboard
local success, err = pcall(function()
    setclipboard(petDataString)
end)

if success then
    print("Pet data copied to clipboard!")
else
    print("Failed to copy to clipboard: " .. tostring(err))
    
    -- Try writing to a file if clipboard fails
    pcall(function()
        writefile("PetsByRarity.txt", petDataString)
        print("Data written to PetsByRarity.txt")
    end)
end
