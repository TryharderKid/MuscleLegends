local crystalChances = game:GetService("ReplicatedStorage").crystalChances

-- Debug function to print the structure of an object
local function printStructure(obj, indent)
    indent = indent or 0
    local indentStr = string.rep("  ", indent)
    
    print(indentStr .. "Type: " .. typeof(obj))
    
    if typeof(obj) == "table" then
        for k, v in pairs(obj) do
            print(indentStr .. "Key: " .. tostring(k))
            printStructure(v, indent + 1)
        end
    else
        print(indentStr .. "Value: " .. tostring(obj))
    end
end

local function extractEggData()
    local result = ""
    local foundEggs = 0
    
    print("Starting egg data extraction...")
    print("Crystal Chances children: " .. #crystalChances:GetChildren())
    
    -- Iterate through each egg module in crystalChances
    for _, eggModule in pairs(crystalChances:GetChildren()) do
        print("Found: " .. eggModule.Name .. " (Type: " .. eggModule.ClassName .. ")")
        
        local eggData
        local success = pcall(function()
            if eggModule:IsA("ModuleScript") then
                eggData = require(eggModule)
            end
        end)
        
        if success and eggData then
            foundEggs = foundEggs + 1
            local eggName = eggModule.Name
            
            print("Successfully required egg module: " .. eggName)
            
            -- Create tables to store pets by rarity
            local petsByRarity = {}
            
            -- Try to extract pet data
            if typeof(eggData) == "table" then
                print("Egg data is a table with " .. #eggData .. " entries")
                
                for index, item in pairs(eggData) do
                    if typeof(item) == "table" then
                        local petName = item.name
                        local rarity = item.rarity
                        
                        print("Found pet: " .. tostring(petName) .. " with rarity: " .. tostring(rarity))
                        
                        if petName and rarity then
                            if not petsByRarity[rarity] then
                                petsByRarity[rarity] = {}
                            end
                            table.insert(petsByRarity[rarity], petName)
                        end
                    end
                end
            else
                print("Egg data is not a table, it's a: " .. typeof(eggData))
                printStructure(eggData)
            end
            
            -- Add egg name as header
            result = result .. eggName .. "\n"
            
            -- Add pets grouped by rarity
            for rarity, pets in pairs(petsByRarity) do
                if #pets > 0 then
                    result = result .. rarity:lower() .. "\n"
                    
                    for _, petName in ipairs(pets) do
                        result = result .. petName .. " - " .. eggName .. "\n"
                    end
                    
                    result = result .. "\n"
                end
            end
            
            result = result .. "\n"
        else
            print("Failed to require module: " .. eggModule.Name)
        end
    end
    
    print("Found " .. foundEggs .. " egg modules")
    return result
end

local eggDataString = extractEggData()
print("\nExtracted Egg Data:")
print(eggDataString)

-- Try to copy to clipboard
local success = pcall(function()
    setclipboard(eggDataString)
end)

if success then
    print("Egg data copied to clipboard!")
else
    print("Failed to copy to clipboard. Here's the data:")
    print(eggDataString)
end
